{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Vanetza in a nutshell Vanetza is an open-source implementation of the ETSI C-ITS protocol suite. Among others, it comprises the following protocols and features: GeoNetworking (GN) Basic Transport Protocol (BTP) Decentralized Congestion Control (DCC) Security Support for ASN.1 messages (Facilities) such as CAM and DENM Though originally designed to operate on ITS-G5 channels in a Vehicular Ad Hoc Network (VANET) using IEEE 802.11p, Vanetza and its components can be combined with other communication technologies as well, e.g. GeoNetworking over IP multicast. Project layout In the first place, Vanetza is a conglomerate of C++ libraries, some depending on others. Sources of these libraries, also known as Vanetza component, are bundled in their respective subdirectories. Component Depends on Features access net Access layer, helpers for IEEE 802.11 PHY and MAC asn1 - Generated code and wrappers for ASN.1 based messages, e.g. CAM and DENM btp geonet Headers and interfaces for BTP transport layer common - General purpose classes used across Vanetza components, including serialization and timing dcc access, net Algorithms for DCC cross-layer facilities asn1, geonet, security Helpers to generate and evaluate ITS messages geonet dcc, net, security GeoNetworking layer featuring geographical routing gnss - Satellite navigation integration for positioning net common Utilities for socket API and packet handling security common, net Security entity to sign and verify packets For most of the code unit tests exist. We are using Googletest for those. Compilation of Vanetza unit tests can be enabled via the BUILD_TESTS CMake option. You can the run those tests in your build directory by executing ctest . Additionally, the tools directory contains several utilities making use of Vanetza libraries. Tool Purpose CMake option benchmark Benchmarking security features, e.g. signing or validating a lot messages in a row BUILD_BENCHMARK certify Utility for generating and handling security certificates, authorization tickets etc. BUILD_CERTIFY socktap Example application using most of the Vanetza stack operating on sockets, i.e. either Linux packet sockets or optionally Cohda LLC sockets BUILD_SOCKTAP Documentation Besides these pages you are reading right now, you can also generate the API documentation from sources with Doxygen. A Doxyfile generating HTML pages to doxygen/html can be found in Vanetza\u2019s root directory. Just invoke doxygen from there. A copy of the API documentation is also hosted online. Of course, your locally generated HTML pages will be more up-to-date in most cases. Deployments Vanetza has been developed for network simulations and testing on embedded devices at Technische Hochschule Ingolstadt initially. Meanwhile, Vanetza is used by many more parties and for more use cases than anticipated in the beginning. Artery is a V2X simulation framework based on OMNeT++ . Vanetza is used in this network simulation as (quite detailed) model of ITS-G5 protocols. Various communication units (roadside units, vehicles and testbeds) in the CARISSMA Car2X lab are powered by Vanetza. Prototype motorcycles operated by the Connected Motorcycle Consortium use Vanetza for evaluation of novel ITS applications to enhance rider safety. If you are using Vanetza, we would love to add your project to the list above. Please write an e-mail to raphael.riebl@thi.de or open a pull request.","title":"Overview"},{"location":"#vanetza-in-a-nutshell","text":"Vanetza is an open-source implementation of the ETSI C-ITS protocol suite. Among others, it comprises the following protocols and features: GeoNetworking (GN) Basic Transport Protocol (BTP) Decentralized Congestion Control (DCC) Security Support for ASN.1 messages (Facilities) such as CAM and DENM Though originally designed to operate on ITS-G5 channels in a Vehicular Ad Hoc Network (VANET) using IEEE 802.11p, Vanetza and its components can be combined with other communication technologies as well, e.g. GeoNetworking over IP multicast.","title":"Vanetza in a nutshell"},{"location":"#project-layout","text":"In the first place, Vanetza is a conglomerate of C++ libraries, some depending on others. Sources of these libraries, also known as Vanetza component, are bundled in their respective subdirectories. Component Depends on Features access net Access layer, helpers for IEEE 802.11 PHY and MAC asn1 - Generated code and wrappers for ASN.1 based messages, e.g. CAM and DENM btp geonet Headers and interfaces for BTP transport layer common - General purpose classes used across Vanetza components, including serialization and timing dcc access, net Algorithms for DCC cross-layer facilities asn1, geonet, security Helpers to generate and evaluate ITS messages geonet dcc, net, security GeoNetworking layer featuring geographical routing gnss - Satellite navigation integration for positioning net common Utilities for socket API and packet handling security common, net Security entity to sign and verify packets For most of the code unit tests exist. We are using Googletest for those. Compilation of Vanetza unit tests can be enabled via the BUILD_TESTS CMake option. You can the run those tests in your build directory by executing ctest . Additionally, the tools directory contains several utilities making use of Vanetza libraries. Tool Purpose CMake option benchmark Benchmarking security features, e.g. signing or validating a lot messages in a row BUILD_BENCHMARK certify Utility for generating and handling security certificates, authorization tickets etc. BUILD_CERTIFY socktap Example application using most of the Vanetza stack operating on sockets, i.e. either Linux packet sockets or optionally Cohda LLC sockets BUILD_SOCKTAP","title":"Project layout"},{"location":"#documentation","text":"Besides these pages you are reading right now, you can also generate the API documentation from sources with Doxygen. A Doxyfile generating HTML pages to doxygen/html can be found in Vanetza\u2019s root directory. Just invoke doxygen from there. A copy of the API documentation is also hosted online. Of course, your locally generated HTML pages will be more up-to-date in most cases.","title":"Documentation"},{"location":"#deployments","text":"Vanetza has been developed for network simulations and testing on embedded devices at Technische Hochschule Ingolstadt initially. Meanwhile, Vanetza is used by many more parties and for more use cases than anticipated in the beginning. Artery is a V2X simulation framework based on OMNeT++ . Vanetza is used in this network simulation as (quite detailed) model of ITS-G5 protocols. Various communication units (roadside units, vehicles and testbeds) in the CARISSMA Car2X lab are powered by Vanetza. Prototype motorcycles operated by the Connected Motorcycle Consortium use Vanetza for evaluation of novel ITS applications to enhance rider safety. If you are using Vanetza, we would love to add your project to the list above. Please write an e-mail to raphael.riebl@thi.de or open a pull request.","title":"Deployments"},{"location":"recipes/cohda-sdk-build/","text":"Building Vanetza for Cohda MK5 using Cohda SDK This document describes step-by-step how to build Vanetza using the Cohda SDK. At the end, we have Vanetza libraries and its socktap tool cross-compiled for Cohda MK5 devices. Cohda SDK Cohda SDK is provided by Cohda Wireless along with their MK5 units. Since you are reading this build how-to you most likely already possess one of these units. This how-to has been created for the Release 16 of the SDK. The following instructions are expected to be done within the virtual machine (VM) provided by Cohda. Please make sure that a recent GCC version for the arm-linux-gnueabihf target is installed in this VM. I recommend to deinstall g++-4.8-arm-linux-gnueabihf entirely as this version supports C++11 only poorly. g++-5-arm-linux-gnueabihf is known to work well. Vanetza build dependencies Compilation of Vanetza depends on several third-party libraries, e.g. Boost, GeographicLib and Crypto++ as mentioned in Vanetza\u2019s README. Steps to compile those dependencies are described in our cross-compile dependencies document . For the sake of simplicity, we provide the pre-compiled dependencies for Cohda MK5 as compressed archives. Archive Content MD5 checksum vanetza-deps-20171129.tar.bz2 Boost 1.65.1, GeographicLib 1.49, Crypto++ 5.6.5 853a2833fde0266674d4a4dbe22fe7ef vanetza-deps-20191126.tar.bz2 Boost 1.71.0, GeographicLib 1.50, Crypto++ 8.2.0 1d8832949673e3935f72aac6c00a132d At the moment, these archives are hosted on box.com . We recommend to download the most recent archive in general. Before the next step, extract the archive\u2019s content into /home/duser/vanetza-deps . Compile Vanetza We assume you have copy of the Vanetza repository in your home directory at /home/duser/vanetza . Create a build directory and tell CMake to use the cross-compiler installed in the Cohda VM and to look up additional dependencies in vanetza-deps : mkdir vanetza-build cd vanetza-build cmake $HOME /vanetza \\ -DCMAKE_TOOLCHAIN_FILE = $HOME /vanetza/cmake/Toolchain-Cohda-MK5.cmake \\ -DCMAKE_FIND_ROOT_PATH = $HOME /vanetza-deps \\ -DCMAKE_INSTALL_RPATH = \\$ ORIGIN/../lib \\ -DCMAKE_INSTALL_PREFIX = $HOME /vanetza-dist make This builds the Vanetza libraries only. Enable the BUILD_SOCKTAP CMake option if you want to try socktap as well. Additionally, enable the SOCKTAP_WITH_COHDA_LLC CMake option if you want socktap to use 802.11p via Cohda\u2019s LLC network interface on your MK5. Fortunately, socktap \u2018s additional gpsd dependency is already shipped with the Cohda SDK itself. You only need to specify its location by setting GPS_LIBRARY to /home/duser/mk5/stack/v2x-lib/lib/mk5/libgps_static.a and GPS_INCLUDE_DIR to /home/duser/mk5/stack/v2x-lib/include . Please note, that socktap does not make use of Cohda\u2019s socket API currently. We might provide a modified socktap application in the future. Deployment make install Compile and link socktap with correct RPATH, binaries are copied to $HOME/vanetza-dist . copy runtime dependencies Copy the shared object files (*.so) from $HOME/vanetza-deps/libs onto the MK5, e.g. to /home/user/vanetza/lib . copy socktap onto MK5 Copy the files from $HOME/vanetza-dist to /home/user/vanetza on the MK5, i.e. Vanetza libraries and its dependency libraries are located in the same directory. You can execute socktap located at /home/user/vanetza/bin/socktap and it will look up its shared objects in the sibling lib directory. If you have enabled the SOCKTAP_WITH_COHDA_LLC CMake option, make sure to give socktap the name of a Cohda LLC network interface via the command line option --interface / -i (e.g. cw-llc0).","title":"Building Vanetza for Cohda MK5 using Cohda SDK"},{"location":"recipes/cohda-sdk-build/#building-vanetza-for-cohda-mk5-using-cohda-sdk","text":"This document describes step-by-step how to build Vanetza using the Cohda SDK. At the end, we have Vanetza libraries and its socktap tool cross-compiled for Cohda MK5 devices.","title":"Building Vanetza for Cohda MK5 using Cohda SDK"},{"location":"recipes/cohda-sdk-build/#cohda-sdk","text":"Cohda SDK is provided by Cohda Wireless along with their MK5 units. Since you are reading this build how-to you most likely already possess one of these units. This how-to has been created for the Release 16 of the SDK. The following instructions are expected to be done within the virtual machine (VM) provided by Cohda. Please make sure that a recent GCC version for the arm-linux-gnueabihf target is installed in this VM. I recommend to deinstall g++-4.8-arm-linux-gnueabihf entirely as this version supports C++11 only poorly. g++-5-arm-linux-gnueabihf is known to work well.","title":"Cohda SDK"},{"location":"recipes/cohda-sdk-build/#vanetza-build-dependencies","text":"Compilation of Vanetza depends on several third-party libraries, e.g. Boost, GeographicLib and Crypto++ as mentioned in Vanetza\u2019s README. Steps to compile those dependencies are described in our cross-compile dependencies document . For the sake of simplicity, we provide the pre-compiled dependencies for Cohda MK5 as compressed archives. Archive Content MD5 checksum vanetza-deps-20171129.tar.bz2 Boost 1.65.1, GeographicLib 1.49, Crypto++ 5.6.5 853a2833fde0266674d4a4dbe22fe7ef vanetza-deps-20191126.tar.bz2 Boost 1.71.0, GeographicLib 1.50, Crypto++ 8.2.0 1d8832949673e3935f72aac6c00a132d At the moment, these archives are hosted on box.com . We recommend to download the most recent archive in general. Before the next step, extract the archive\u2019s content into /home/duser/vanetza-deps .","title":"Vanetza build dependencies"},{"location":"recipes/cohda-sdk-build/#compile-vanetza","text":"We assume you have copy of the Vanetza repository in your home directory at /home/duser/vanetza . Create a build directory and tell CMake to use the cross-compiler installed in the Cohda VM and to look up additional dependencies in vanetza-deps : mkdir vanetza-build cd vanetza-build cmake $HOME /vanetza \\ -DCMAKE_TOOLCHAIN_FILE = $HOME /vanetza/cmake/Toolchain-Cohda-MK5.cmake \\ -DCMAKE_FIND_ROOT_PATH = $HOME /vanetza-deps \\ -DCMAKE_INSTALL_RPATH = \\$ ORIGIN/../lib \\ -DCMAKE_INSTALL_PREFIX = $HOME /vanetza-dist make This builds the Vanetza libraries only. Enable the BUILD_SOCKTAP CMake option if you want to try socktap as well. Additionally, enable the SOCKTAP_WITH_COHDA_LLC CMake option if you want socktap to use 802.11p via Cohda\u2019s LLC network interface on your MK5. Fortunately, socktap \u2018s additional gpsd dependency is already shipped with the Cohda SDK itself. You only need to specify its location by setting GPS_LIBRARY to /home/duser/mk5/stack/v2x-lib/lib/mk5/libgps_static.a and GPS_INCLUDE_DIR to /home/duser/mk5/stack/v2x-lib/include . Please note, that socktap does not make use of Cohda\u2019s socket API currently. We might provide a modified socktap application in the future.","title":"Compile Vanetza"},{"location":"recipes/cohda-sdk-build/#deployment","text":"make install Compile and link socktap with correct RPATH, binaries are copied to $HOME/vanetza-dist . copy runtime dependencies Copy the shared object files (*.so) from $HOME/vanetza-deps/libs onto the MK5, e.g. to /home/user/vanetza/lib . copy socktap onto MK5 Copy the files from $HOME/vanetza-dist to /home/user/vanetza on the MK5, i.e. Vanetza libraries and its dependency libraries are located in the same directory. You can execute socktap located at /home/user/vanetza/bin/socktap and it will look up its shared objects in the sibling lib directory. If you have enabled the SOCKTAP_WITH_COHDA_LLC CMake option, make sure to give socktap the name of a Cohda LLC network interface via the command line option --interface / -i (e.g. cw-llc0).","title":"Deployment"},{"location":"recipes/cross-compile-dependencies/","text":"This document summarises a few hints for cross-compiling Vanetza\u2019s dependencies. Boost Create a configuration file for Boost.Build in your home directory at $HOME/user-config.jam and add following line to it: using gcc : arm : arm-linux-gnueabihf-g++ ; The install stage does not work in Boost 1.71.0 (and 1.70.0) when cross-compiling. A workaround for this issue is to remove following lines from tools/build/src/tools/common.jam (around line 976): # From GCC 5, versioning changes and minor becomes patch if $(tag) = gcc && [ numbers.less 4 $(version[1]) ] { version = $(version[1]) ; } # Ditto, from Clang 4 if ( $(tag) = clang || $(tag) = clangw ) && [ numbers.less 3 $(version[1]) ] { version = $(version[1]) ; } Then, the required libraries can be built and installed at given prefix path: ./b2 --prefix = $HOME /vanetza-deps --with-date_time --with-program_options --with-system --no-samples --no-tests variant = release link = shared cxxstd = 11 install Crypto++ Version 8.2 can be cross-compiled with the provided GNUmakefile-cross makefile. export CXX = arm-linux-gnueabihf-g++ export PREFIX = $HOME /vanetza-deps export HAS_SOLIB_VERSION = 1 make -f GNUmakefile-cross shared make -f GNUmakefile-cross install GeographicLib Following steps have been tested with version 1.50. $VANETZA refers to the root directory of this repository. mkdir build.arm cd build.arm cmake .. -DCMAKE_TOOLCHAIN_FILE = $VANETZA /cmake/Toolchain-Cohda-MK5.cmake -DCMAKE_BUILD_TYPE = Release -DCMAKE_INSTALL_PREFIX = $HOME /vanetza-deps make install","title":"Cross compile dependencies"},{"location":"recipes/cross-compile-dependencies/#boost","text":"Create a configuration file for Boost.Build in your home directory at $HOME/user-config.jam and add following line to it: using gcc : arm : arm-linux-gnueabihf-g++ ; The install stage does not work in Boost 1.71.0 (and 1.70.0) when cross-compiling. A workaround for this issue is to remove following lines from tools/build/src/tools/common.jam (around line 976): # From GCC 5, versioning changes and minor becomes patch if $(tag) = gcc && [ numbers.less 4 $(version[1]) ] { version = $(version[1]) ; } # Ditto, from Clang 4 if ( $(tag) = clang || $(tag) = clangw ) && [ numbers.less 3 $(version[1]) ] { version = $(version[1]) ; } Then, the required libraries can be built and installed at given prefix path: ./b2 --prefix = $HOME /vanetza-deps --with-date_time --with-program_options --with-system --no-samples --no-tests variant = release link = shared cxxstd = 11 install","title":"Boost"},{"location":"recipes/cross-compile-dependencies/#crypto","text":"Version 8.2 can be cross-compiled with the provided GNUmakefile-cross makefile. export CXX = arm-linux-gnueabihf-g++ export PREFIX = $HOME /vanetza-deps export HAS_SOLIB_VERSION = 1 make -f GNUmakefile-cross shared make -f GNUmakefile-cross install","title":"Crypto++"},{"location":"recipes/cross-compile-dependencies/#geographiclib","text":"Following steps have been tested with version 1.50. $VANETZA refers to the root directory of this repository. mkdir build.arm cd build.arm cmake .. -DCMAKE_TOOLCHAIN_FILE = $VANETZA /cmake/Toolchain-Cohda-MK5.cmake -DCMAKE_BUILD_TYPE = Release -DCMAKE_INSTALL_PREFIX = $HOME /vanetza-deps make install","title":"GeographicLib"}]}